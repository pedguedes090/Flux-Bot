module.exports = {
  name: 'transfer',
  description: 'Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c',
  usage: '!transfer [s·ªë ti·ªÅn] [user_id]',
  examples: [
    '!transfer 100 123456 - Chuy·ªÉn 100 ƒëi·ªÉm cho user c√≥ ID 123456',
    '!transfer 500 789012 - Chuy·ªÉn 500 ƒëi·ªÉm cho user c√≥ ID 789012'
  ],
  aliases: ['chuyentien', 'send', 'gift'],
  async execute(client, event, args, db) {
    const chatId = event.event?.message?.chat_id || event.message?.chat_id;
    if (!chatId) {
      console.error('No chat_id found in event');
      return;
    }

    try {
      // L·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i t·ª´ event
      const senderId = event.event?.sender?.sender_id?.user_id || event.sender?.sender_id?.user_id;
      if (!senderId) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i!' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra tham s·ªë
      if (args.length < 2) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Thi·∫øu tham s·ªë!\nüí° S·ª≠ d·ª•ng: !transfer [s·ªë ti·ªÅn] [user_id]' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra s·ªë ti·ªÅn
      const amount = parseInt(args[0]);
      if (isNaN(amount) || amount <= 0) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!\nüí° S·ªë ti·ªÅn ph·∫£i l√† s·ªë d∆∞∆°ng.' 
            })
          }
        });
        return;
      }

      // L·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i t·ª´ database
      const sender = await new Promise((resolve, reject) => {
        db.get('SELECT user_id, username, money FROM users WHERE user_id = ?', [senderId], (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });

      if (!sender) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i trong database!' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra s·ªë d∆∞
      if (sender.money < amount) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: `‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß!\nüí≥ S·ªë d∆∞ hi·ªán t·∫°i: ${sender.money} ƒëi·ªÉm` 
            })
          }
        });
        return;
      }

      // L·∫•y th√¥ng tin ng∆∞·ªùi nh·∫≠n t·ª´ database
      const receiverId = args[1];
      const receiver = await new Promise((resolve, reject) => {
        db.get('SELECT user_id, username, money FROM users WHERE user_id = ?', [receiverId], (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });

      if (!receiver) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n!' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra t·ª± chuy·ªÉn cho m√¨nh
      if (receiver.user_id === sender.user_id) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!' 
            })
          }
        });
        return;
      }

      // Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
      await new Promise((resolve, reject) => {
        db.run('BEGIN TRANSACTION');
        
        // Tr·ª´ ti·ªÅn ng∆∞·ªùi g·ª≠i
        db.run('UPDATE users SET money = money - ? WHERE user_id = ?', [amount, sender.user_id], (err) => {
          if (err) {
            db.run('ROLLBACK');
            reject(err);
            return;
          }
          
          // C·ªông ti·ªÅn ng∆∞·ªùi nh·∫≠n
          db.run('UPDATE users SET money = money + ? WHERE user_id = ?', [amount, receiver.user_id], (err) => {
            if (err) {
              db.run('ROLLBACK');
              reject(err);
              return;
            }
            
            db.run('COMMIT');
            resolve();
          });
        });
      });

      // Th√¥ng b√°o th√†nh c√¥ng
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ 
            text: [
              '‚úÖ Chuy·ªÉn ti·ªÅn th√†nh c√¥ng!',
              `üë§ Ng∆∞·ªùi g·ª≠i: ${sender.username}`,
              `üë§ Ng∆∞·ªùi nh·∫≠n: ${receiver.username}`,
              `üíµ S·ªë ti·ªÅn: ${amount} ƒëi·ªÉm`,
              `üí≥ S·ªë d∆∞ c√≤n l·∫°i: ${sender.money - amount} ƒëi·ªÉm`
            ].join('\n')
          })
        }
      });

    } catch (error) {
      console.error('Error in transfer command:', error);
      if (error.response?.data) {
        console.error('API Error:', error.response.data);
      }
      
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ 
            text: '‚ùå C√≥ l·ªói x·∫£y ra khi chuy·ªÉn ti·ªÅn!' 
          })
        }
      });
    }
  }
}; 