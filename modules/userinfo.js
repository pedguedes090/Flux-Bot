module.exports = {
  name: 'userinfo',
  description: 'Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng',
  async execute(client, event, args, db) {
    try {
      const userId = event.sender.sender_id.user_id;
      const chatId = event.message.chat_id;

      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ database
      const user = await new Promise((resolve, reject) => {
        db.get('SELECT * FROM users WHERE user_id = ?', [userId], (err, row) => {
          if (err) reject(err);
          resolve(row);
        });
      });

      if (!user) {
        await client.im.message.create({
          params: { receive_id_type: 'chat_id' },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ text: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.' })
          }
        });
        return;
      }

      const infoText = `üë§ Th√¥ng tin ng∆∞·ªùi d√πng:\n\n` +
        `ID: ${user.user_id}\n` +
        `Username: ${user.username}\n` +
        `S·ªë tin nh·∫Øn: ${user.message_count}\n` +
        `S·ªë ti·ªÅn: ${user.money} üí∞\n` +
        `Ng√†y tham gia: ${new Date(user.created_at).toLocaleDateString()}`;

      await client.im.message.create({
        params: { receive_id_type: 'chat_id' },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ text: infoText })
        }
      });
    } catch (error) {
      console.error('Error in userinfo command:', error);
      await client.im.message.create({
        params: { receive_id_type: 'chat_id' },
        data: {
          receive_id: event.message.chat_id,
          msg_type: 'text',
          content: JSON.stringify({ text: '‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.' })
        }
      });
    }
  }
}; 