module.exports = {
  name: 'work',
  description: 'L√†m vi·ªác ƒë·ªÉ ki·∫øm ƒëi·ªÉm',
  usage: '!work',
  examples: [
    '!work - L√†m vi·ªác ƒë·ªÉ ki·∫øm ƒëi·ªÉm'
  ],
  aliases: ['l√†m', 'job'],
  async execute(client, event, args, db) {
    const chatId = event.event?.message?.chat_id || event.message?.chat_id;
    if (!chatId) {
      console.error('No chat_id found in event');
      return;
    }

    try {
      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      const userId = event.event?.sender?.sender_id?.user_id || event.sender?.sender_id?.user_id;
      if (!userId) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra cooldown
      const lastWork = await new Promise((resolve, reject) => {
        db.get('SELECT last_work FROM users WHERE user_id = ?', [userId], (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });

      if (lastWork && lastWork.last_work) {
        const lastWorkTime = new Date(lastWork.last_work).getTime();
        const now = Date.now();
        const cooldownTime = 5 * 60 * 1000; // 10 ph√∫t
        const timeLeft = cooldownTime - (now - lastWorkTime);

        if (timeLeft > 0) {
          const minutes = Math.floor(timeLeft / 60000);
          const seconds = Math.floor((timeLeft % 60000) / 1000);
          
          await client.im.message.create({
            params: {
              receive_id_type: 'chat_id'
            },
            data: {
              receive_id: chatId,
              msg_type: 'text',
              content: JSON.stringify({ 
                text: `‚è∞ B·∫°n ƒë√£ l√†m c√¥ng vi·ªác h√¥m nay, ƒë·ªÉ tr√°nh ki·ªát s·ª©c h√£y quay l·∫°i sau: ${minutes} ph√∫t ${seconds} gi√¢y.` 
              })
            }
          });
          return;
        }
      }

      // Danh s√°ch c√¥ng vi·ªác
      const jobs = [
        "b√°n v√© s·ªë",
        "s·ª≠a xe",
        "l·∫≠p tr√¨nh",
        "hack facebook",
        "ƒë·∫ßu b·∫øp",
        "th·ª£ h·ªì",
        "fake taxi",
        "gangbang ng∆∞·ªùi n√†o ƒë√≥",
        "th·ª£ s·ª≠a ·ªëng n∆∞·ªõc may m·∫Øn  ( Õ°¬∞ Õú ñ Õ°¬∞)",
        "streamer",
        "b√°n h√†ng tr·ª±c tuy·∫øn",
        "n·ªôi tr·ª£",
        'b√°n "hoa"',
        "t√¨m jav/hentai code cho SpermLord",
        "ch∆°i Yasuo v√† g√°nh ƒë·ªôi c·ªßa b·∫°n"
      ];

      // Ch·ªçn c√¥ng vi·ªác ng·∫´u nhi√™n
      const randomJob = jobs[Math.floor(Math.random() * jobs.length)];
      
      // T√≠nh ti·ªÅn th∆∞·ªüng (100-500 ƒëi·ªÉm)
      const reward = Math.floor(Math.random() * 401) + 100;

      // C·∫≠p nh·∫≠t database v·ªõi timestamp hi·ªán t·∫°i
      const now = new Date().toISOString();
      await new Promise((resolve, reject) => {
        db.run(`
          UPDATE users 
          SET money = money + ?, 
              last_work = ? 
          WHERE user_id = ?
        `, [reward, now, userId], (err) => {
          if (err) reject(err);
          else resolve();
        });
      });

      // Th√¥ng b√°o th√†nh c√¥ng
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ 
            text: `üíº B·∫°n ƒë√£ l√†m c√¥ng vi·ªác "${randomJob}" v√† ki·∫øm ra ƒë∆∞·ª£c ${reward} ƒëi·ªÉm!` 
          })
        }
      });

    } catch (error) {
      console.error('Error in work command:', error);
      if (error.response?.data) {
        console.error('API Error:', error.response.data);
      }
      
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ 
            text: '‚ùå C√≥ l·ªói x·∫£y ra khi l√†m vi·ªác!' 
          })
        }
      });
    }
  }
}; 