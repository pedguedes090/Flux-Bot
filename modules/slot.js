const symbols = ['üçé', 'üçã', 'üçá', 'üçí', 'üçä', 'üíé', '7Ô∏è‚É£', 'üé∞'];

module.exports = {
  name: 'slot',
  description: 'Ch∆°i slot machine',
  usage: '!slot [s·ªë ƒëi·ªÉm]',
  examples: [
    '!slot - Ch∆°i v·ªõi 100 ƒëi·ªÉm m·∫∑c ƒë·ªãnh',
    '!slot 500 - Ch∆°i v·ªõi 500 ƒëi·ªÉm'
  ],
  aliases: ['s'],
  async execute(client, event, args, db) {
    const chatId = event.event?.message?.chat_id || event.message?.chat_id;
    if (!chatId) {
      console.error('No chat_id found in event');
      return;
    }

    try {
      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      const userId = event.event?.sender?.sender_id?.user_id || event.sender?.sender_id?.user_id;
      if (!userId) {
        console.error('No user_id found in event');
        return;
      }

      // L·∫•y s·ªë ƒëi·ªÉm ƒë·∫∑t c∆∞·ª£c
      let betAmount = 100; // M·∫∑c ƒë·ªãnh 100 ƒëi·ªÉm
      if (args.length > 0) {
        const parsedBet = parseInt(args[0]);
        if (isNaN(parsedBet) || parsedBet < 10) {
          await client.im.message.create({
            params: {
              receive_id_type: 'chat_id'
            },
            data: {
              receive_id: chatId,
              msg_type: 'text',
              content: JSON.stringify({ text: '‚ùå S·ªë ƒëi·ªÉm ƒë·∫∑t c∆∞·ª£c ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 10!' })
            }
          });
          return;
        }
        betAmount = parsedBet;
      }

      // Ki·ªÉm tra s·ªë d∆∞
      const user = await new Promise((resolve, reject) => {
        db.get('SELECT money FROM users WHERE user_id = ?', [userId], (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });

      if (!user) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ text: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!' })
          }
        });
        return;
      }

      if (user.money < betAmount) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ text: `‚ùå B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm! S·ªë d∆∞: ${user.money} ƒëi·ªÉm` })
          }
        });
        return;
      }

      // Quay slot
      const results = [
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)]
      ];

      // T√≠nh to√°n k·∫øt qu·∫£
      let multiplier = 0;
      let resultText = '';

      if (results[0] === results[1] && results[1] === results[2]) {
        // Ba bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
        switch (results[0]) {
          case 'üíé':
            multiplier = 10;
            break;
          case '7Ô∏è‚É£':
            multiplier = 7;
            break;
          case 'üé∞':
            multiplier = 5;
            break;
          default:
            multiplier = 3;
        }
        resultText = `üéâ JACKPOT! Ba ${results[0]}!`;
      } else if (results[0] === results[1] || results[1] === results[2] || results[0] === results[2]) {
        // Hai bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
        multiplier = 1.9;
        resultText = 'üéØ Hai bi·ªÉu t∆∞·ª£ng gi·ªëng nhau!';
      } else {
        // Kh√¥ng tr√πng
        multiplier = 0;
        resultText = 'üò¢ Ch√∫c may m·∫Øn l·∫ßn sau!';
      }

      // T√≠nh to√°n s·ªë ƒëi·ªÉm th·∫Øng/thua
      const winAmount = Math.floor(betAmount * multiplier);
      const finalAmount = winAmount - betAmount;

      // C·∫≠p nh·∫≠t s·ªë d∆∞
      await new Promise((resolve, reject) => {
        db.run('UPDATE users SET money = money + ? WHERE user_id = ?', [finalAmount, userId], (err) => {
          if (err) reject(err);
          else resolve();
        });
      });

      // L·∫•y s·ªë d∆∞ m·ªõi
      const newBalance = await new Promise((resolve, reject) => {
        db.get('SELECT money FROM users WHERE user_id = ?', [userId], (err, row) => {
          if (err) reject(err);
          else resolve(row.money);
        });
      });

      // Hi·ªÉn th·ªã k·∫øt qu·∫£
      const resultMessage = [
        'üé∞ **K·∫øt qu·∫£ Slot Machine** üé∞\n',
        `[ ${results.join(' | ')} ]\n`,
        resultText,
        `\nüí∞ ƒê·∫∑t c∆∞·ª£c: ${betAmount} ƒëi·ªÉm`,
        multiplier > 0 ? `\n‚ú® H·ªá s·ªë: x${multiplier}` : '',
        `\nüíµ ${finalAmount >= 0 ? 'Th·∫Øng' : 'Thua'}: ${Math.abs(finalAmount)} ƒëi·ªÉm`,
        `\nüí≥ S·ªë d∆∞: ${newBalance} ƒëi·ªÉm`
      ].join('');

      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ text: resultMessage })
        }
      });

    } catch (error) {
      console.error('Error in slot command:', error);
      if (error.response?.data) {
        console.error('API Error:', error.response.data);
      }
      
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ text: '‚ùå C√≥ l·ªói x·∫£y ra khi ch∆°i slot!' })
        }
      });
    }
  }
}; 