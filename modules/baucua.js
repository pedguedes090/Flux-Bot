const fs = require('fs');
const path = require('path');
const https = require('https');

// T·∫£i ·∫£nh n·∫øu ch∆∞a c√≥
async function downloadImage(url, filepath) {
  if (!fs.existsSync(filepath)) {
    return new Promise((resolve, reject) => {
      https.get(url, (response) => {
        if (response.statusCode === 200) {
          const writeStream = fs.createWriteStream(filepath);
          response.pipe(writeStream);
          writeStream.on('finish', () => {
            writeStream.close();
            resolve();
          });
        } else {
          reject(new Error(`Failed to download image: ${response.statusCode}`));
        }
      }).on('error', reject);
    });
  }
}

// T·∫£i t·∫•t c·∫£ ·∫£nh c·∫ßn thi·∫øt
async function downloadAllImages() {
  const cacheDir = path.join(__dirname, '../cache');
  if (!fs.existsSync(cacheDir)) {
    fs.mkdirSync(cacheDir);
  }

  const images = {
    'ga.jpg': 'https://i.imgur.com/jPdZ1Q8.jpg',
    'tom.jpg': 'https://i.imgur.com/4214Xx9.jpg',
    'bau.jpg': 'https://i.imgur.com/4KLd4EE.jpg',
    'cua.jpg': 'https://i.imgur.com/s8YAaxx.jpg',
    'ca.jpg': 'https://i.imgur.com/YbFzAOU.jpg',
    'nai.jpg': 'https://i.imgur.com/UYhUZf8.jpg',
    'baucua.gif': 'https://i.imgur.com/dlrQjRL.gif'
  };

  for (const [filename, url] of Object.entries(images)) {
    await downloadImage(url, path.join(cacheDir, filename));
  }
}

// Chuy·ªÉn ƒë·ªïi t√™n th√†nh emoji
function getEmoji(name) {
  const emojis = {
    'ga': 'üêì',
    'tom': 'ü¶û',
    'bau': 'üçê',
    'cua': 'ü¶Ä',
    'ca': 'üêü',
    'nai': 'ü¶å'
  };
  return emojis[name] || name;
}

// L·∫•y k·∫øt qu·∫£ ng·∫´u nhi√™n
function getRandomResult() {
  const items = ['ga', 'tom', 'bau', 'cua', 'ca', 'nai'];
  const result = [];
  for (let i = 0; i < 3; i++) {
    result.push(items[Math.floor(Math.random() * items.length)]);
  }
  return result;
}

module.exports = {
  name: 'baucua',
  description: 'Ch∆°i b·∫ßu cua t√¥m c√°',
  usage: '!baucua [b·∫ßu/cua/c√°/nai/g√†/t√¥m] [s·ªë ti·ªÅn]',
  examples: [
    '!baucua b·∫ßu 1000 - C∆∞·ª£c 1000 ƒëi·ªÉm v√†o b·∫ßu',
    '!baucua cua 2000 - C∆∞·ª£c 2000 ƒëi·ªÉm v√†o cua'
  ],
  aliases: ['bc', 'bau'],
  async execute(client, event, args, db) {
    const chatId = event.event?.message?.chat_id || event.message?.chat_id;
    if (!chatId) {
      console.error('No chat_id found in event');
      return;
    }

    try {
      // T·∫£i ·∫£nh n·∫øu ch∆∞a c√≥
      await downloadAllImages();

      // L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
      const userId = event.event?.sender?.sender_id?.user_id || event.sender?.sender_id?.user_id;
      if (!userId) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i!' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra tham s·ªë
      if (args.length < 2) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Thi·∫øu tham s·ªë!\nüí° S·ª≠ d·ª•ng: !baucua [b·∫ßu/cua/c√°/nai/g√†/t√¥m] [s·ªë ti·ªÅn]' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra s·ªë ti·ªÅn
      const betAmount = parseInt(args[1]);
      if (isNaN(betAmount) || betAmount <= 0) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá!\nüí° S·ªë ti·ªÅn ph·∫£i l√† s·ªë d∆∞∆°ng.' 
            })
          }
        });
        return;
      }

      // Ki·ªÉm tra s·ªë d∆∞
      const user = await new Promise((resolve, reject) => {
        db.get('SELECT money FROM users WHERE user_id = ?', [userId], (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });

      if (!user) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i trong database!' 
            })
          }
        });
        return;
      }

      if (betAmount > user.money) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: `‚ùå S·ªë ti·ªÅn c∆∞·ª£c l·ªõn h∆°n s·ªë d∆∞!\nüí≥ S·ªë d∆∞ hi·ªán t·∫°i: ${user.money} ƒëi·ªÉm` 
            })
          }
        });
        return;
      }

      if (betAmount < 1000) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 1000 ƒëi·ªÉm!' 
            })
          }
        });
        return;
      }

      // Chuy·ªÉn ƒë·ªïi t√™n con v·∫≠t
      const betItem = args[0].toLowerCase();
      const itemMap = {
        'b·∫ßu': 'bau',
        'cua': 'cua',
        'c√°': 'ca',
        'nai': 'nai',
        'g√†': 'ga',
        't√¥m': 'tom'
      };

      const item = itemMap[betItem];
      if (!item) {
        await client.im.message.create({
          params: {
            receive_id_type: 'chat_id'
          },
          data: {
            receive_id: chatId,
            msg_type: 'text',
            content: JSON.stringify({ 
              text: '‚ùå Con v·∫≠t kh√¥ng h·ª£p l·ªá!\nüí° S·ª≠ d·ª•ng: !baucua [b·∫ßu/cua/c√°/nai/g√†/t√¥m] [s·ªë ti·ªÅn]' 
            })
          }
        });
        return;
      }

      // G·ª≠i ·∫£nh l·∫Øc
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ 
            text: 'üé≤ ƒêang l·∫Øc...' 
          })
        }
      });

      // ƒê·ª£i 5 gi√¢y
      await new Promise(resolve => setTimeout(resolve, 5000));

      // L·∫•y k·∫øt qu·∫£
      const result = getRandomResult();
      const emojis = result.map(getEmoji);

      // T√≠nh ti·ªÅn th∆∞·ªüng
      const count = result.filter(r => r === item).length;
      let reward = 0;
      let message = '';

      if (count > 0) {
        if (count === 1) {
          reward = betAmount + 300;
          message = `üéâ K·∫øt qu·∫£: ${emojis.join(' | ')}\nüí∞ Th·∫Øng ${reward} ƒëi·ªÉm (1 ${getEmoji(item)})`;
        } else if (count === 2) {
          reward = betAmount * 2;
          message = `üéâ K·∫øt qu·∫£: ${emojis.join(' | ')}\nüí∞ Th·∫Øng ${reward} ƒëi·ªÉm (2 ${getEmoji(item)})`;
        } else if (count === 3) {
          reward = betAmount * 3;
          message = `üéâ K·∫øt qu·∫£: ${emojis.join(' | ')}\nüí∞ Th·∫Øng ${reward} ƒëi·ªÉm (3 ${getEmoji(item)})`;
        }
      } else {
        reward = -betAmount;
        message = `üò¢ K·∫øt qu·∫£: ${emojis.join(' | ')}\nüí∏ Thua ${betAmount} ƒëi·ªÉm (0 ${getEmoji(item)})`;
      }

      // C·∫≠p nh·∫≠t s·ªë d∆∞
      await new Promise((resolve, reject) => {
        db.run('UPDATE users SET money = money + ? WHERE user_id = ?', [reward, userId], (err) => {
          if (err) reject(err);
          else resolve();
        });
      });

      // G·ª≠i k·∫øt qu·∫£
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ 
            text: message 
          })
        }
      });

    } catch (error) {
      console.error('Error in baucua command:', error);
      if (error.response?.data) {
        console.error('API Error:', error.response.data);
      }
      
      await client.im.message.create({
        params: {
          receive_id_type: 'chat_id'
        },
        data: {
          receive_id: chatId,
          msg_type: 'text',
          content: JSON.stringify({ 
            text: '‚ùå C√≥ l·ªói x·∫£y ra khi ch∆°i b·∫ßu cua!' 
          })
        }
      });
    }
  }
}; 